// Define a function that either updates a (unique by a `key`) document in the
// given `index`, or creates a new one if such document does not exists yet.
// Useful when dealing with data that forms 1:n and n:m relationships.
CreateFunction({
  name: "createOrUpdate",
  body: Query(
    Lambda(
      ["input"],
      Let(
        {
          index: Select("index", Var("input")),
          collection: Select("collection", Var("input")),
          key: Select("key", Var("input")),
          data: Select("data", Var("input")),

          search: Select(Var("key"), Var("data")),
          match: Match(Var("index"), Var("search"))
        },
        If(
          IsEmpty(Var("match")),
          Create(Var("collection"), Var("input")),
          Update(
            Select("ref", Get(Var("match"))),
            Var("input")
          )
        )
      )
    )
  )
});

// Implement `cursor` resolver function. Which can be called from graphql via
// `query { cursor: { id } }`
CreateFunction({
  name: "cursor",
  body: Query(
    Lambda(
      [],
      Let(
        {
          match: Documents(Collection("Cursor"))
        },
        If(
          // We either do not yet have cursor document or we have just one.
          // If we have 0 than we create a new document with id: "", otherwise
          // We just get the first match as we will only have one.
          IsEmpty(Var("match")),
          Create(Collection("Cursor"), {
            data: { id: "" }
          }),
          Get(Var("match"))
        )
      )
    )
  )
});

// Function that updates the cursor and enforces 0 or 1 cursor document
// invariant.
CreateFunction({
  name: "setCursor",
  body: Query(
    Lambda(
      ["value"],
      Let(
        {
          match: Documents(Collection("Cursor"))
        },
        If(
          IsEmpty(Var("match")),
          Create(Collection("Cursor"), Var("value")),
          Update(Select("ref", Get(Var("match"))), Var("value"))
        )
      )
    )
  )
});

// Helper function adds or updates token owner to the DB.
CreateFunction({
  name: "importOwner",
  body: Query(
    Lambda(
      ["data"],
      Call("createOrUpdate", {
        index: Index("unique_Owner_id"),
        key: "id",
        collection: Collection("Owner"),
        data: Var("data")
      })
    )
  )
});

// Helper function add or updates Eth block info to the DB.
CreateFunction({
  name: "importBlock",
  body: Query(
    Lambda(
      ["data"],
      Call("createOrUpdate", {
        key: "number",
        index: Index("unique_Block_number"),
        collection: Collection("Block"),
        data: {
          hash: Select("hash", Var("data")),
          number: ToInteger(Select("number", Var("data")))
        }
      })
    )
  )
});

// Helper function add or updates Token Contract info to the DB.
CreateFunction({
  name: "importTokenContract",
  body: Query(
    Lambda(
      ["data"],
      Call("createOrUpdate", {
        key: "id",
        index: Index("unique_TokenContract_id"),
        collection: Collection("TokenContract"),
        data: Var("data")
      })
    )
  )
});

// Helper function adds or updates Token Asset info to the DB.
CreateFunction({
  name: "importTokenAsset",
  body: Query(
    Lambda(
      ["data"],
      Call("createOrUpdate", {
        key: "tokenURI",
        index: Index("unique_TokenAsset_tokenURI"),
        collection: Collection("TokenAsset"),
        data: Var("data")
      })
    )
  )
});

// Helper function that adds or updates Token to the DB. Update could happen
// when token is transferred from one owner to the other.
CreateFunction({
  name: "importERC721Token",
  body: Query(
    Lambda(
      ["token"],
      Let(
        {
          uri: Select("tokenURI", Var("token")),
          // subgraph provides `tokenURI: ""` when metadata extension is not
          // supported. Here we just turn that back to `null` so it's eaiser
          // to query.
          tokenURI: If(
            Equals(0, Length(Var("uri"))),
            null,
            Var("uri")
          ),

          tokenAsset: If(
            IsNull(Var("tokenURI")),
            null,
            Call("importTokenAsset", {
              tokenURI: Var("tokenURI"),
            })
          ),

          block: Call("importBlock", {
            hash: Select("blockHash", Var("token")),
            number: Select("blockNumber", Var("token"))
          }),

          contract: Call("importTokenContract", Select("contract", Var("token"))),
          owner: Call("importOwner", Select("owner", Var("token"))),

          token: Call("createOrUpdate", {
            key: "id",
            index: Index("unique_Token_id"),
            collection: Collection("Token"),
            data: {
              id: Select("id", Var("token")),
              tokenID: Select("tokenID", Var("token")),
              mintTime: Select("mintTime", Var("token")),

              tokenAsset: Select("ref", Var("tokenAsset")),

              contract: Select("ref", Var("contract")),
              owner: Select("ref", Var("owner")),
            }
          })
        },
        Do(
          Create(Collection("block_tokens"), {
            data: {
              tokenID: Select("ref", Var("token")),
              blockID: Select("ref", Var("block"))
            }
          }),
          Var("token")
        )
      )
    )
  )
});

// Implement GraphQL resolver function for importing tokens from nft.storage
// subgraph (https://thegraph.com/explorer/subgraph/nftstorage/eip721-subgraph)
// into a DB. Import takes current cursor and a set of tokens to import, if
// cursor has changed transaction is rejected otherwise performs atomic update
// that adds / updates provided tokens.
CreateFunction({
  name: "importERC721",
  body: Query(
    Lambda(
      ["input"],
      If(
        Not(
          Equals(
            Select(["data", "id"], Call("cursor")),
            Select("id", Var("input"))
          )
        ),
        Abort(
          Format(
            "Import is rejected because input.id: '%s' missmatches current cursor: {id: '%s'}",
            [
              Select(["data", "id"], Call("cursor")),
              Select("id", Var("input"))
            ]
          )
        ),
        Let(
          {
            id: Select("id", Var("input")),
            tokens: Select("tokens", Var("input")),
            import: Create(Collection("ERC721ImportResult"), {
              data: {
                id: Var("id"),
                nextID: null
              }
            }),
            result: Reduce(
              Lambda(
                ["state", "input"],
                Let(
                  {
                    token: Call("importERC721Token", Var("input")),
                    link: Create(Collection("eRC721ImportResult_tokens"), {
                      data: {
                        tokenID: Select("ref", Var("token")),
                        eRC721ImportResultID: Select("ref", Var("import")),
                      }
                    })
                  },
                  {
                    id: Var("id"),
                    nextID: Select(["data", "id"], Var("token"))
                  }
                )
              ),
              {
                id: Var("id"),
                nextID: Var("id"),
                tokens: []
              },
              Var("tokens")
            )
          },
          Do(
            // Update cursor
            Call('setCursor', {
              data: {
                id: Select("nextID", Var("result"))
              }
            }),
            Update(
              Select("ref", Var("import")),
              {
                data: Var("result")
              }
            )
          )
        )
      )
    )
  )
});


// // Utility function for clearing document collection, useful in interactive
// // sessions.
// Call("overrideFunction", {
//   name: 'clear',
//   body: Query(
//     Lambda(
//       ["name"],
//       Foreach(
//         Paginate(Documents(Collection(Var("name")))),
//         Lambda(["ref"], Delete(Var("ref")))
//       )
//     )
//   )
// });

// This defines a `Paginate` function just like one in standard library, except
// this one can take non static options. For more details see:
// https://docs.fauna.com/fauna/current/api/graphql/functions?lang=javascript#paginated
CreateFunction({
  name: "paginate",
  body: Query(
    Lambda(
      ["input", "options"],
      Let(
        {
          size: Select("size", Var("options")),
          after: Select("after", Var("options"), null),
          before: Select("before", Var("options"), null)
        },
        If(
          Equals(Var("before"), null),
          If(
            Equals(Var("after"), null),
            Paginate(Var("input"), { size: Var("size") }),
            Paginate(Var("input"), { size: Var("size"), after: Var("after") })
          ),
          Paginate(Var("input"), { size: Var("size"), before: Var("before") })
        )
      )
    )
  )
});

// Define an index that allows effective filtering of the TokenAsset's by a
// status. If document has a `metadata` field set it is considered "succeeded",
// if it has a `problem` fields set it is considered "failed" otherwise it is
// considered "queued".
CreateIndex({
  name: "token_status",
  source: {
    collection: Collection("TokenAsset"),
    fields: {
      status: Query(
        Lambda(
          "doc",
          Let(
            {
              problem: Select(["data", "problem"], Var("doc"), null),
              metadata: Select(["data", "metadata"], Var("doc"), null)
            },
            If(
              Not(IsNull(Var("problem"))),
              "failed",
              If(
                Not(IsNull(Var("metadata"))),
                "succeeded",
                "queued"
              )
            )
          )
        )
      )
    }
  },
  terms: [{ binding: "status" }]
});


// Implements GraphQL resolver which allows to query token assets by their
// status, it has a following type signature:
// (
//    where:{status: 'Queued'|'Failed'|'Succeeded'},
//    size: number
//    after?: string
//    before?: string
// ) => TokenAsset[])
CreateFunction({
  name: 'findTokenAssets',
  body: Query(
    Lambda(
      ["where", "size", "after", "before"],
      Let(
        {
          status: Select("status", Var("where")),
          match: Match(Index("token_status"), LowerCase(Var("status"))),
          refs: Call("paginate", Var("match"), {
            size: Var("size"),
            after: Var("after"),
            before: Var("before")
          })
        },
        Map(
          Var("refs"),
          Lambda("ref", Get(Var("ref")))
        )
      )
    )
  )
});

CreateFunction({
  name: "getTokenAssetByID",
  body: Query(
    Lambda(
      ["id"],
      Get(Ref(Collection("TokenAsset"), Var("id")))
    )
  )
});

// Returns status of the token asset.
CreateFunction({
  name: "tokenAssetStatus",
  body: Query(
    Lambda(
      "doc",
      Let(
        {
          problem: Select(["data", "problem"], Var("doc"), null),
          metadata: Select(["data", "metadata"], Var("doc"), null)
        },
        If(
          Not(IsNull(Var("problem"))),
          "Failed",
          If(
            Not(IsNull(Var("metadata"))),
            "Succeeded",
            "Queued"
          )
        )
      )
    )
  )
});

CreateFunction({
  name: "importResource",
  body: Query(
    Lambda(
      ["input"],
      Call("createOrUpdate", {
        key: "uri",
        index: Index("unique_Resource_uri"),
        collection: Collection("Resource"),
        data: {
          uri: Select("uri", Var("input")),
          ipfsURL: Select("ipfsURL", Var("input"), null),
          status: "Idle"
        }
      })
    )
  )
});


// ({ tokenAssetID: ID, metadata: MetadataInput }) => string
// interface MetadataInput {
//   name: string
//   description: string
//   image: ResourceInput
//   assets: ResourceInput
// }
// interface ResourceInput {
//   uri: string
//   cid?: string
// }
CreateFunction({
  name: "importTokenMetadata",
  body: Query(
    Lambda(
      ["input"],
      Let(
        {
          tokenAsset: Call("getTokenAssetByID", Select("tokenAssetID", Var("input"))),
          status: Call("tokenAssetStatus", Var("tokenAsset")),
          // If TokenAsset already has a metadata we abort the operation,
          // otherwise create a new metadata entry.
          metadata: If(
            Equals(Var("status"), "Succeeded"),
            Abort("Aborting, because TokenAsset already has a metadata"),
            Create(
              Collection("Metadata"),
              {
                data: {
                  source: Select("ref", Var("tokenAsset")),
                  name: Select(["metadata", "name"], Var("input")),
                  description: Select(["metadata", "description"], Var("input")),
                  image: Select("ref", Call("importResource", Select(["metadata", "image"], Var("input"))))
                }
              }
            )
          ),
          assets: Select(["metadata", "assets"], Var("input")),
          resources: If(IsNull(Var("assets")), [], Var("assets"))
        },
        Do(
          Foreach(
            Var("resources"),
            Lambda(
              ["resourceInput"],
              Let(
                {
                  // Import a resource. We may already have it, because
                  resource: Call("importResource", Var("resourceInput"))
                },
                Create(
                  Collection("metadata_assets"),
                  {
                    data: {
                      metadataID: Select("ref", Var("metadata")),
                      resourceID: Select("ref", Var("resource"))
                    }
                  }
                )
              )
            ),
          ),
          Update(
            Select("ref", Var("tokenAsset")),
            {
              data: {
                metadata: Select("ref", Var("metadata"))
              }
            }
          ),
          Var("metadata")
        )
      )
    )
  )
});

CreateFunction({
  name: "reportTokenAssetProblem",
  body: Query(
    Lambda(
      ["input"],
      Let(
        {
          tokenAsset: Call("getTokenAssetByID", Select("tokenAssetID", Var("input"))),
          status: Call("tokenAssetStatus", Var("tokenAsset")),
        },
        If(
          // If TokenAsset is succeeded back off
          Equals(Var("status"), "Succeeded"),
          Abort("Aborting, because TokenAsset already has metadata"),
          Do(
            Update(
              Select("ref", Var("tokenAsset")),
              {
                data: {
                  problem: Select("problem", Var("input"))
                }
              }
            ),
            Var("tokenAsset")
          )
        )
      )
    )
  )
});


CreateIndex({
  name: "resource_status",
  source: Collection("Resource"),
  terms: [{ field: ["data", "status"] }]
});


CreateFunction({
  name: 'findResources',
  body: Query(
    Lambda(
      ["where", "size", "after", "before"],
      Let(
        {
          status: Select("status", Var("where")),
          match: Match(Index("resource_status"), Var("status")),
          refs: Call("paginate", Var("match"), {
            size: Var("size"),
            after: Var("after"),
            before: Var("before")
          })
        },
        Map(
          Var("refs"),
          Lambda("ref", Get(Var("ref")))
        )
      )
    )
  )
});
